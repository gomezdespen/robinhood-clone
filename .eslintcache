[{"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/index.js":"1","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/App.js":"2","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/reportWebVitals.js":"3","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/Header.js":"4","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/Newsfeed.js":"5","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/Stats.js":"6","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/LineGraph.js":"7","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/StatsRow.js":"8"},{"size":500,"mtime":1608268139510,"results":"9","hashOfConfig":"10"},{"size":444,"mtime":1608747597463,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608268139513,"results":"12","hashOfConfig":"10"},{"size":886,"mtime":1608516575357,"results":"13","hashOfConfig":"10"},{"size":660,"mtime":1608661687747,"results":"14","hashOfConfig":"10"},{"size":2057,"mtime":1610394850555,"results":"15","hashOfConfig":"10"},{"size":2705,"mtime":1608663349517,"results":"16","hashOfConfig":"10"},{"size":601,"mtime":1608749002344,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"x4qf3",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/index.js",[],["36","37"],"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/App.js",[],"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/reportWebVitals.js",[],"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/Header.js",[],"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/Newsfeed.js",[],"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/Stats.js",["38"],"/Users/danielgomez/dev/Projects/react/robinhood-clone/src/LineGraph.js",["39"],"import React, { useEffect, useState } from 'react';\nimport {Line} from \"react-chartjs-2\";\nimport './LineGraph.css'\n\nfunction LineGraph() {\n\n    const [graphData, setGraphData ] = useState([]);\n\n    const data =\n    [{\n        x: 10,\n        y:20\n\n    },{\n        x: 15,\n        y:10\n\n    },{\n        x: 12,\n        y:4\n\n    }\n    ]\n    \n    const createMockData = () =>{\n        let data =[];\n        let value = 50;\n        for(var i =0; i < 366; i++){\n            let date = new Date(i);\n            date.setHours(0, 0, 0, 0);\n            date.setDate(i);\n            value += Math.round((Math.random() < 0.5 ? 1 : 0) * Math.random () * 10);\n            data.push({x: date, y: value});\n        }\n        setGraphData(data);\n    }\n\n    useEffect(()=>{\n        createMockData();\n    }, [])  \n\n    return (\n        <div className=\"linegraph\">\n            <Line \n                data={{\n                    datasets:[\n                        {\n                            type:\"line\",\n                            data: graphData,\n                            backgroundColor: \"black\",\n                            borderColor:\"#5AC53B\",\n                            borderWidth: 2,\n                            pointBorderColor: 'rgba(0, 0, 0, 0)',\n                            pointBackgroundColor:'rgba(0, 0, 0, 0)',\n                            pointHoverBackgroundColor:'#5AC53B',\n                            pointHoverBorderColor:'#000000' ,\n                            pointHoverBorderWidth:4,\n                            pointHoverRadius:6,\n                        }\n                    ]\n                        \n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend:{\n                        display: false\n                    },\n\n                    tooltips:{\n                        mode: \"index\",\n                        intersect: false\n                    },\n\n                    scales: {\n                        xAxes: [\n                            {\n                            type: \"time\",\n                            time:{\n                                format: \"MM/DD/YY\",\n                                tooltipFormat: \"ll\",\n                            },\n                            ticks:{\n                                display: false,\n                            }\n                          },\n                        ],\n                        yAxes :[{\n                            ticks: {\n                                display: false,\n                            }\n                        }]\n                    }\n                }}\n            />\n            \n        </div>\n    )\n}\n\nexport default LineGraph;\n","/Users/danielgomez/dev/Projects/react/robinhood-clone/src/StatsRow.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":26,"column":32,"nodeType":"46","messageId":"47","endLine":26,"endColumn":34},{"ruleId":"48","severity":1,"message":"49","line":9,"column":11,"nodeType":"50","messageId":"51","endLine":9,"endColumn":15},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]